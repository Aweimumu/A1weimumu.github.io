{"meta":{"title":"Awei","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"2022-7-22","date":"2022-07-19T22:57:07.224Z","updated":"2022-07-20T04:02:25.504Z","comments":true,"path":"2022/07/20/2022-7-22/","link":"","permalink":"http://example.com/2022/07/20/2022-7-22/","excerpt":"","text":"Eexception(异常处理)重点！！！！异常介绍： java语言中 将程序执行中发生的不正常情况下称为 “异常”语法错误或者逻辑错误不是异常 执行过程中所发生的异常事件可以分为两类 Error Java虚拟机无法解决的严重错误 如JVM 系统内部错误 资源耗尽等 Exception：其他因编程错误或偶然或偶然的外的元素导致的一般性问题 Exception分两大类 运行时异常（程序运行时发生的异常）和编译时异常（在编写程序时 编译检查出的异常） 异常处理的体系图常见的运行时异常包括 NullPointerException 空指针异常(当应用程序在需要对象的地方使用null时程序抛出异常演示NullpointException.java) ArithmeticException 数字运算异常 ArrayIndexOutOfBoundException 数组下标越界异常 ClassCastException 类型转换异常 NumberFormatException 数字格式不正确异常[] 常见的编译异常 SQLException //操作数据库 查询表可能发生的异常 IOException //操作文件时，发生的异常 FileNotFoundException //当操作一个不存在的文件时 发生异常 ClassNotFoundException //操作文件到文件尾部发生异常 IllegalArgumentException //参数异常 异常处理基本介绍异常处理就当异常发生时对异常处理的方式 异常处理的方式1.try-catch-finally 程序员在代码中捕获发生的异常 自行处理 2.throws 将反生的异常抛出 交给调用者来处理 最顶级的处理是JVM 基本的语法 try{ //可疑代码 //将异常生成的对应的异常对象，传递给catch }catch(异常){ //对异常的处理 }//如果没有finally语法可疑通过 123456789101112 try &#123; String str=&quot;Awei&quot;; int a=Integer.parseInt(str);//这里只要错了下面的代码不会执行 直接到catch System.out.println(&quot;数字：&quot;+ a); &#125; catch (NumberFormatException e) &#123; System.out.println(&quot;异常的信息&quot;+e.getMessage()); &#125;finally&#123; System.out.println(&quot;finally 被执行&quot;)//不管代码会不会错 finally代码块会被执行 &#125; System.out.println(&quot;程序继续&quot;);//这里还是会继续执行 &#125;//如果代码不会错 不会执行Catch 如果try代码块要可能多个异常可以通过多个catch分别处理 但是父类的异常必须写在后面 1234567891011121314151617181920212223242526272829303132333435363738try &#123; Person person = new Person(); person=null; System.out.println(person.getName());//NullpointExceptoin int n1 = 10; int n2 = 0; int res = n1 / n2;//ArithmenticException &#125; catch (NullPointerException e) &#123; System.out.println(&quot;空指针=&quot; + e.getMessage()); &#125; catch (ArithmeticException e) &#123; System.out.println(&quot;算数异常：&quot; + e.getMessage()); &#125; catch (Exception e) &#123; System.out.println(e.getMessage()); &#125; finally &#123; &#125; &#125;&#125;class Person &#123; private String name = &quot;jack&quot;; public String getName() &#123; return name; &#125;&#125; /* 可以进行 try-finally配合使用，这种用法相当于没有捕获异常 因此程序会直接崩掉应用场景就是一段代码不管发生异常都会执行finally */ try &#123; int n1=10; int n2=2; System.out.println(n1/n2); &#125;finally &#123; System.out.println(&quot;执行了finally&quot;); &#125; System.out.println(&quot;程序继续执行 &quot;); throw异常抛出基本介绍如果一个方法（中的语句执行时）可能造成某种异常 但是不确定如何处理这种异常 则此方法应显示的声明抛出异常 表面该方法不对这些异常处理进行处理 而由该方法调用者负责 在方法声明中用throw语句可以声明抛出异常的列表 throws后面的异常类型可以是方法中产生的异常类型 也是是他的父类 123456789101112public static void main(String[] args) &#123; &#125; public void f2() throws Exception &#123; //创建一个文件流对象 //这里的异 常时一个fileNotFoundException 编译异常 //使用try-cath-finally //使用throws抛出异常 让调用f2方法的调用者来处理 //throws可以反生的异常类型 也可以是它的父类 //可以抛出多个异常 FileInputStream fileInputStream = new FileInputStream(&quot;d://aa.txt&quot;); &#125;","categories":[],"tags":[]},{"title":"","slug":"今日事","date":"2022-07-19T10:54:51.520Z","updated":"2022-07-19T11:49:00.511Z","comments":true,"path":"2022/07/19/今日事/","link":"","permalink":"http://example.com/2022/07/19/%E4%BB%8A%E6%97%A5%E4%BA%8B/","excerpt":"","text":"今日无学习 木木我爱你 删除当前行 CTRLl+y复制当前行 CTRL+alt+↓补全代码 alt+/添加注释 CTRL+/导入改行需要的类 auto import alt+ener快速格式化 CTRL+alt+l快速运行程序 alt+r生成构造器 alt+insert查看一个类的层级关系 alt+hctrl+b看定位到当前的类或者方法中.var生成变量名","categories":[],"tags":[]}],"categories":[],"tags":[]}